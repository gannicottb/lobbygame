Does this game follow the same basic structure as Guess Who?

Why not just two states? Progress and Wait?

Consider the lifecycle

Backend starts. State = Wait
The Backend has a defined number of players that it will wait for.
When enough people have logged in, State = Progress, and the players are dropped into the world.


Players who login at any time are added to the queue. The queue is only examined at the end of a round.
	queue = []

	We can't allow duplicates in the queue
		enqueued = []
		enqueued[uid] = true

		so

		uid = id of player that just logged in
		if(!enqueued[uid]){
			queue.push(uid);
			enqueued[uid] = true;
		}

		and likewise, when we want to pop the user off

		uid = queue.pop();
		if(uid != undefined){
			enqueued[uid] = false;
		}

		O(1) time to avoid duplicates rather than O(N)

When the round starts, we set a timer and broadcast the round end time.
When the timer is up, the round is over, and we broadcast that event.
We then want to display the round results for some time before starting the next round
So we can have a prepare timer, and here's the two-fold approach:
	onRoundOver, set the prepare timer for PREPARE_DURATION
	When the prepare is up, check if there are enough players in the queue.
	If not, then we just wait for a login event to trigger the round start.

When the user logs in, if they are in the wait queue, they should know that, and how long they have to wait.

The return value for login could include that info
The wait queue could be an event, so that all players are notified when they enter/leave the wait queue (better)
But isn't that wasteful? Sending a message to every node even when only 4 of them care? No, because it updates their view of the queue

So actually, it's just one event that contains the current queue. com.google.boat.queueUpdate or something

mobiles display the queue box if they are in the queue.
The queue box gets updated on com.google.boat.queueUpdate to reflect changes.

